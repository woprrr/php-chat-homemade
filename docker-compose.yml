version: '3'

services:
    php:
        build:
            context: ./app1
        container_name: php
        depends_on:
            - db
        # Comment out these volumes in production
        volumes:
            - ./app1:/srv/app1:rw,cached
            # If you develop on Linux, comment out the following volumes to just use bind-mounted project directory from host
        environment:
            # If you develop on Windows change this to remote_host=docker.for.win.localhost
            # If you develop on Linux change this to remote_host=172.17.0.1
            XDEBUG_CONFIG: "remote_host=docker.for.mac.localhost idekey=IDE_XDEBUG"
            PHP_IDE_CONFIG: "serverName=docker-server"

    app1:
        build:
            context: ./app1
            dockerfile: Dockerfile.nginx
        container_name: app1
        depends_on:
            - php
        ports:
            - "8080:80"
        volumes:
            - ./app1/public:/srv/app1/public:ro

    cache-proxy:
        build:
            context: ./app1/
            dockerfile: ./Dockerfile.varnish
        container_name: cache-proxy
        depends_on:
            - app1
        # Comment out this volume in production
        volumes:
            - ./app1/docker/varnish/conf:/etc/varnish:ro
        ports:
            - "8081:80"

    db:
        # In production, you may want to use a managed database service
        image: postgres:9.6-alpine
        container_name: db
        environment:
            - POSTGRES_DB=chat_app
            - POSTGRES_USER=chat
            - POSTGRES_PASSWORD=chat
        volumes:
            - db-data:/var/lib/postgresql/data:rw
        ports:
            - "5432:5432"

    adminer:
      image: adminer
      container_name: adminer
      depends_on:
          - db
      restart: always
      ports:
        - 2000:8080

    h2-proxy:
        build:
            context: ./h2-proxy
            dockerfile: ./Dockerfile
        container_name: h2-proxy
        depends_on:
            - app1
            - cache-proxy
        ports:
            - "80:80"
            - "443:443"
            - "8443:8443"

volumes:
    db-data: {}